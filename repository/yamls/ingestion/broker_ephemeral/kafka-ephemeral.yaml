apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: edh
spec:
  kafka:
    version: 3.2.3
    replicas: 2
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
#      - name: external
#        port: 9094
#        type: loadbalancer
#        tls: false
# This config make at least one kafka broker in each avaiability zone
#    rack:
#      topologyKey: topology.kubernetes.io/zone
    config:
      # Report and UI for Cruise Control
      metric.reporters: "com.linkedin.kafka.cruisecontrol.metricsreporter.CruiseControlMetricsReporter"
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      num.partitions: 1
      log.message.format.version: "3.2"
      inter.broker.protocol.version: "3.2"
      log.retention.hours: 2160
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    storage:
      type: ephemeral
# Toleration (only kafka in node), affinity and antiaffinity
#    template:
#      pod:
#        tolerations:
#          - key: "dedicated"
#            operator: "Equal"
#            value: "Kafka"
#            effect: "NoSchedule"
#        affinity:
#          nodeAffinity:
#            requiredDuringSchedulingIgnoredDuringExecution:
#              nodeSelectorTerms:
#                - matchExpressions:
#                    - key: dedicated
#                      operator: In
#                      values:
#                      - Kafka
#          podAntiAffinity:
#            requiredDuringSchedulingIgnoredDuringExecution:
#              - labelSelector:
#                - matchExpressions:
#                    - key: worload
#                      operator: In
#                      values:
#                      - rdbms
#                      - nosql
    resources:
      requests:
        memory: 250Mi
        cpu: "250m"
      limits:
        memory: 500Mi
        cpu: "500m"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
  zookeeper:
    replicas: 1
    storage:
      type: ephemeral
    resources:
      requests:
        memory: 250Mi
        cpu: "250m"
      limits:
        memory: 500Mi
        cpu: "500m"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: zookeeper-metrics
          key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
# need 2 kafka node
#  cruiseControl:
#    metricsConfig:
#      type: jmxPrometheusExporter
#      valueFrom:
#        configMapKeyRef:
#          name: cruise-control-metrics
#          key: metrics-config.yml
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"