### TO DEPLOY SQL RUNNERS IN THE CLUSTER
### FROM LENSES YOU NEED TO PATCH THE SERVICE ACCOUNT
### LENSES WILL USE TO DEPLOY. SEE:
### https://docs.lenses.io/install_setup/deployment-options/kubernetes-deployment.html

image:
  repository: lensesio/lenses
  pullPolicy: IfNotPresent

annotations: {}
labels: {}
strategy: {}
nodeSelector: {}
tolerations: {}
affinity: {}
securityContext: {}

# Monitoring
monitoring:
  pipeline: lenses
  enabled: true
  port: 9102
  path: "/metrics"

# Resource management
resources: {}

# rbacEnable indicates if a the cluster has rbac enabled and a cluster role
# and rolebinding should be created for the service account
rbacEnable: true

# restPort is the Lenses rest port
restPort: 3030
servicePort: 83

# serviceAccount is the Service account to be used by Lenses to deploy apps
serviceAccount: default

# If you use Data Policies module enable a Persistent Volume to keep your data policies rule.
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 5Gi
  # Target an pre-existing volume claim to use it as Lenses Persistent volume
  # existingClaim:

  ## Policies data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

#service
service:
  enabled: true
  type: ClusterIP
  annotations: {}

  externalTrafficPolicy:

  # If you want to make it available as a node port, then add nodePort: <somePort>
  # Warning: this should not be used with servicePort:
  # nodePort:

  ## Load balancer IP address
  ## Is not required, but allows for static address with
  ## serviceType LoadBalancer.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerIP:

  ## This will restrict traffic through the cloud-provider load-balancer
  ## to the specified client IPs.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerSourceRanges:
  #   - 0.0.0.0/0

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  host:

  # Ingress annotations
  annotations:
    kubernetes.io/ingress.class: traefik
#    kubernetes.io/ingress.class: nginx
#    kubernetes.io/tls-acme: 'true'
#    nginx.ingress.kubernetes.io/rewrite-target: /

  # TLS if enabled load the tls.crt and tls.keys as a secrets and enable TLS on the ingress
  tls:
    enabled: false
    crt: |-

    key: |-

lenses:
  # For generic settings
  # Read more: https://docs.lenses.io/4.0/configuration/jvm/#content
  lensesOpts: |-

  append:
    # Add custom configuration values, will take precedence over the env variables and auto-generated values
    # Read more: https://docs.lenses.io/3.2/install_setup/deployment-options/docker-deployment.html#configuration-via-files-and-secrets
    conf: |-

  jvm:
    # heapOpts are any overrides for Lenses Heap JVM options
    heapOpts: |-

    # logBackOpts are any logging options
    logBackOpts:

    #performanceOpts are any jvm tuning options to add to the jvm
    performanceOpts:

    # base64 encoded truststore data
    trustStoreFileData: |-

    # trust store password
    trustStorePassword:

  # TODO: Replace with docker implementation
  # Global truststore/keystore for the JVM
  opts:
    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    trustStoreFileData: |-

    # base64 trust store password
    # echo "$password" | tr -d '\n' | base64
    trustStorePassword: |-

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    keyStoreFileData: |-

    # base64 keystore password
    # echo "$password" | tr -d '\n' | base64
    keyStorePassword: |-

  tls:
    # TLS setup for serving Lenses over TLS
    enabled: false

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    keyStoreFileData: |-

    # base64 keystore password
    # echo "$password" | tr -d '\n' | base64
    keyStorePassword: |-

    # base64 key password
    # echo "$password" | tr -d '\n' | base64
    keyPassword: |-

    # Authenticate to Lenses with client authentication
    clientAuth: false

    # base64 encoded truststore data
    # openssl base64 < kafka.truststore.jks | tr -d '\n'
    trustStoreFileData: |-

    # base64 trust store password
    # echo "$password" | tr -d '\n' | base64
    trustStorePassword: |-

  # Broker details
  ## Brokers should be behind a service, if so set one entry in the hosts
  ## If your brokers are outside explicitly add them to the hosts. Note you only need one to bootstrap
  ## but you should specify more than one for resilience

  # kafka ssl
  # The keytab, key and truststores file data are the base64 encoded contents of the files. YOU MUST PROVIDE THE DATA BASE64 encoded
  # openssl base64 < client.keystore.jks | tr -d '\n'
  # The passwords will be base64enc by the secret
  # and added to the kafka secret and mounted into /mnt/secrets
  kafka:
    ssl:
      # TLS setup to connect to brokers over TLS with/without client authentication
      enabled: false

      # base64 encoded truststore data
      trustStoreFileData: |-

      # password strings
      trustStorePassword:

      # base64 encoded keystore data
      keyStoreFileData: |-

      keyStorePassword:
      keyPassword:
    sasl:
      # Authenticate to brokers using SASL, can be used in conjuction with SSL
      enabled: false

      # mechanism is the sasl authentication mechanism GSSAPI, SCRAM or PLAIN
      mechanism: GSSAPI

      # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets
      # Note: this will be deprecated in favor of jaasConfig
      jaasFileData: |-

      # jaasConfig
      # This configuration is used inline, so do not enclose it in 'KafkaClient{ }'
      # jaasConfig: |-
      #   com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab="lenses.keytab" storeKey=true useTicketCache=false serviceName=kafka principal="lenses@TESTING.LENSES.IO";
      jaasConfig: |-

      # krb5Conf is the kerberos config data to be mounted into /etc
      krb5Conf: |-

      # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets
      # openssl base64 < keytab | tr -d '\n'
      keyTabData: |-

    # JMX/JOLOKIA Metrics
    metrics:
      enabled: false
      username:
      password:
      ssl:
      type: "JMX"
      port: 9102
      # For multiple ports:
      # ports:
      #   - id: foo
      #     port: 9103
      #     host: example1
      #   - id: bar
      #     port: 9104
      #     host: example2
      # For multiple ports from AWS:
      # type: AWS
      # ports:
      #   - id: foo
      #     url: example1:9103
      #   - id: bar
      #     url: example2:9104

    bootstrapServers:
      - name: "edh-kafka-bootstrap.ingestion.svc.cluster.local"
        port: 9092
        sslPort: 9093
#        saslSslPort: 9094
#        saslPlainTextPort: 9095

  # zookeeper
  ## Zookeepers should be behind a service, if so set one entry in the hosts
  ## If your zookeepers are outside explicitly add them to the hosts.
  zookeepers:
    enabled: true
    chroot:
    hosts:
      - host: "edh-zookeeper-client.ingestion.svc.Cluster.local"
        port: 2181
        # JMX/JOLOKIA Metrics
        # metrics:
        #   type: "JMX"
        #   port: 9102
        #   protocol:
        #   username:
        #   password:
        #   ssl:

  # schemaRegistries
  ## Schema registries should be behind a service, if so set one entry in the hosts
  ## If your schema registries are outside explicitly add them to the hosts.
  schemaRegistries:
    enabled: true
    mode:
    topic:
    hosts:
      - host: "schema-registry-cp-schema-registry.ingestion.svc.cluster.local"
        protocol: http
        port: 8081
        # If your schema registry accepts request in a path eg. <url>:<port>/api/v1
        path:
        # JMX/JOLOKIA Metrics
        # metrics:
        #   type: "JMX"
        #   port: 9102
        #   protocol:
        #   username:
        #   password:
        #   ssl:

    ssl:
      ## Encryption in Transit
      # base64 encoded truststore data
      trustStoreFileData: |-

      # password strings
      trustStorePassword:

      ## Authentication via TLS certificates
      # base64 encoded keystore data
      keyStoreFileData: |-

      keyStorePassword:
      keyPassword:

    security:
      enabled: false

      # Authenticate against a protected cluster
      # For BasicAuth set authType to `USER_INFO`
      authType:
      username:
      password:

  connectClusters:
    enabled: true
    clusters:
      - name: edh
        port: 8083
        jmxPort: 9102
        protocol: http
        offsetsTopic: connect-offsets
        statusTopic: connect-status
        configTopic: connect-configs

        # Authenticate using BasicAuth
        # authType:
        # username:
        # password:

        # TODO: Add connect auth using SSL

        # Secret provider
        # aes256:
        #  - key: PasswordPasswordPasswordPassword

        hosts:
          - host: "edh-connect-api.ingestion.svc.cluster.local"
            # JMX/JOLOKIA Metrics
            #  metrics:
            #  type: "JMX"
            #  port: 9102
            #   protocol:
            #   username:
            #   password:
            #   ssl:


  storage:
    postgres:
      enabled: true
      host: postgres-postgresql.database.svc.cluster.local
      port: 5432              # optional, defaults to 5432
      username: plumber
      password: PlumberSDE
      database: owshq
      schema:             # optional, defaults to public schema

  # Data Application Deployment Framework
  deployments:
    eventsBufferSize: 10000
    errorsBufferSize: 1000

    connect:
      statusInterval: 30 second
      actionsBufferSize: 1000

  # sql
  sql:
#    processorImage: eu.gcr.io/lenses-container-registry/lenses-sql-processor
#    processorImageTag: 2.3
    mode: IN_PROC
    heap: 1024M
    minHeap: 128M
    memLimit: 1152M
    memRequest: 128M
    livenessInitialDelay: 60 seconds

  # alerts
  alerts:
    enabled: true
    consumersLagThreshold: 50000

    # The alert plugins to integrate with Lenses
    plugins:
      # Example
      # - class: "io.lenses.alerts.plugin.slack.SlackAlertsPlugin"
      #   config: |
      #     {
      #       webhook-url="https://your-slack-webhook-url
      #       username=Lenses™
      #       channel=lenses-slack-test
      #     }
      # - class: "io.lenses.alerts.plugin.am.AlertManagerPlugin"
      #   config: |
      #     {
      #       endpoints="http://your-alert-manager-url"
      #       source=PROD
      #       generator-url="http://lenses_prod:port1"
      #     }



  #grafana
  grafanaUrl:

  # topics
  topics:
      # suffix to add to lenses system topics, for example if you are running more than one Lenses on the same kafka cluster
    suffix:

  security:
    # Change Default Lenses user credentials.
    # Username: admin / Password:admin
    defaultUser:
    # Example
      username: admin
      password: admin

    # SPNEGO for incoming connections to Lenses
    kerberos:
      enabled: false
      principal:
      keytabData: |-

      debug: false

    # ldap setting
    ldap:
      enabled: false
      url: ""
      base: ""
      password: ""
      user: ""
      filter: ""

      # ldap plugins
      plugin:
        class: "io.lenses.security.ldap.LdapMemberOfUserGroupPlugin"
        memberofKey: ""
        groupExtractRegex: ""
        personNameKey: ""

    saml:
      enabled: false
      # The HTTPS URL of the Lenses deployment.
      # This needs to match the Service Provider (SP) URL
      # given to the Identity Provider (IdP)
      # as it will be used as part of the SAML handshake protocol.
      baseUrl:

      # Provider type.
      # Supported values:
      # "azure"    - Microsoft Azure
      # "okta"     - Okta
      # "onelogin" - OneLogin
      # "keycloak" - Keycloak
      provider:

      # XML File provided by the external Identity Provider.
      # This is needed in order for Lenses SAML to understand how to communicate
      # with the Idenity Provider.
      # content of the XML file - base64 encoded
      #  openssl base64 < idp.xml | tr -d '\n'
      metadataFileData: |-

      # base64 encoded keystore data to be used for SAML crypto.
      #  openssl base64 < saml.jks | tr -d '\n'
      keyStoreFileData: |-

      # Password for accessing the keystore.
      keyStorePassword:

      # Alias to use for the private key within the keystore (only required when the keystore has multiple keys)
      keyAlias:

      # Password for accessing the private key within the keystore.
      keyPassword:

    append:
      conf: |-

  # license is the Lenses license
  license: |-
              {"key": "eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.4RKf1-_Fdkkvtl46PXEH7JdQjw9uM_shBxbSPT6H1B6wShrEzuSERw.2qRjBV2a3UXP0qyruduzyQ.6MoqHeIvjkdpsDYzABZRPCKOwNPjYiJuSU59w7lS2ZQ80cxuoWAbANMNQ89Y5h-Liq4_m28ZjYzQIlTHYYU_9yOQM3GhkRayxuPqudBsUDtLoivjERAkArwbX3eAPvZlvjRgJsuxD6V9-XJzvXCYJYP11H07O0Ek_I6xKezmdr9jVd-_Xg52RJFo63OM0BLOFrcNsg17bRIyFddWFUxTk4vC3vdc4pAwC4xel7mWCoU3R8BVPRbCd7HpNP0c7DSt5Xmr124S5QQJoTRoYaadkFkyQLKKPpre_reBQyNwlXSvlmMhcYJtyj0J-gzwOHuqqZ0XwEFnZJGq_fITglmHWZGoJKJIHpD58WBcPC9HrRbZzyAIkUnrRo-9J-4muleI07QTfzp2X4otMFbnX0EEkw_HjghkuLMwJiUZ1lARC5Q3P2zL9DEGkppsudCgQgCqEi9ap5xZddifxSx5w5_q0EKXOkHhqDnrqb1BomhhWYaKNZboiMgJXF3v-WOCtTFk9z00R2SqtVdDN8PKtpH2avTtguHsDNBwnxH6T_R2AkeNKmpydD2kaBVuM_R97MjUrCZJGsoBXoS37omP8niPPZsOfM7NuPPn0UiC0Bf_q5aNYP0el0ZdLw0JlaFHpA6aWfRb2p3Zs4q994oR6udmXTIb0W6elSdOvwucIe_cwSugqALBTCrtaKNZFMXRVE0s61k2rBXz5RjlVVI0jMwlmzflstVqYjSMxknEKVZcLpLmu-4QEgBQFPCYHsj7FPb2peq-J6LUGUHRGmrZmmyfs1HuIwy5LAG5u-ydP8hNeq9l6rp7vVKPZWLhi_UtJJ9Tu-pDumvb6BJsYLOuk8aJTHqPzShY6uCnaYmxw9h1XP3coMxDtWEdsSYkQ_8fchp7hN_vlt6RL000JGZtvC-KqwejzFwjgNS1HwrXAeTYCdw4Zjlz9kn2GjR8Dcq3bUfPRMFkWli32rmgPHf7RC4Ejr2MWLRnb9WJ6K_WlTd3X4mBCC4XHDd8L_34BngUbH3R8ZZ3Yj9Z9MofsxC4q38H-BiB7Ugv61KkUInSY556ZrwRh4rIMjB1Q2IVUol4Yawahu37mccBsMzN14D10TVavFcB6nuyxLAEBFU-6Xc9GHQaJYMmUkT8tLkSV7rprRv1m0n-vfHY_Vcfh1p0-iqluHT1abbpIAe1b1wR-pWMrrQSAd6ZSMGwe7jYQEhKYKl18UkQs-3DJqbQ_pP8LCxDVh8vmTLngLJ9-Z36yQ9cMcOwM0xWpUYFJx8tb_2a-wOhifb7MNS1jYqbzvlIMCKyWu0pPJ28fvnlCf1OPwlpIXcu5lWC5ve9TC333Jtu9qa3jpw6d2zxgGpUwWGP6DXn0uSNhoE6U5vm0VhxVH2Hpvgxoek7B6Ou1RWpxKl_GTRGPdq7Vf7PqbJrx6Gl2JECGqQ6SJ7_waI7V18PCCHFIinwdcwhzLopozcclJq2wOdwdaue0QJzMO2GyKQzvNIylweYa0-o_D5FDI24kp2Tkgp0xuqDfggPrFXydkG7Ed0YrAvRNHoLNxrrWRXS3dGAJTqRix7AFljknNmsjB7m5wKaPUG8jKRgzxVNhzox1N05DmF6V66AIT6vEa3A_FigSG_80--wOLmmkHxTCjJ6y_5GVOwgYe9-1h5EdeND_8M2ObxocDsAlSBW3pd5abtUK7ASKBoyraM-y_8H3baTZLBabsAetvQbUfxY3dHwogZEJBK19vKaSnWmThr9rJByxOIXQkYJGgiqRDv_dcqAexiO3pduvRh79SMuA69iJ0BDoWAySjfDp9O2wl7AGddys2L_PlBvV3pwLPDgUruG_Wu0_h89u1JZbIn9a7GvZ0AbmkKFlM371cCBxrtFAcll4UMrLwWI7YTL4iB6r3nFWGGkMt9Rhv3uJQox9zpoOXzIAqgfnfdGxI11M1mMoAcjNYJNYylXzMN9_KVzfStfFyHDfyec-N_DhoEHjmBtjEXgeVPpBfvzzegdMc_2nq-YwUyAvaNCEhAOn8g-k7Bn0LWjuWSsQFA0CIZXJHllsHQSuJCXZNy_0cs23z8us0QoaKyb0tQegl7-5U_UC9ZqQCDDTM_2MGXMRQyTdEQNcEzAhyOzpVIvvXGaCIx6HdxWxWeAXtivA-BLvlcxfn1m_IqaFdz_sfLMFhG0L6eaPfQhSpHaXhgAENgVYnsT8QGd2lJWnWxopC6CRib5itAWTJLqVRlEUGr0yTZzGpYqdmpVUpwhyrYU5HVSwRUHgYgs1OsJ9reHRvFguQjp_xBPh9ZhtyM0ryGAQ_BTxCW1wBWbB0PVKFFvJaVbI0661VvuH4BJFblX59ejaMP31BI7CG0nFWAK5gOGdhTDNcQ5cbnANiJ3OmfrpJoelMvotf3veszowU7wWiJfNRQ_3WCjUdi_PDRfVQNxdIcRr74b0roYwb6gdMyh2sOF7Zfg1ms1u1g3hQeNVFnPxD0nHv_T9toG2U2BSGVDaibkGYwMlZPZkBJcutFQ9IYUEgQJEcR2GOeT28f9CwlYmrFt7r06M_5cbTjjzPFlPYEm4clUmRUN--nsn3LMelsCbnHsDS4uKE5XLZZjq09Xo87maXZjiVl56tkUV5aVAfEsXuT7h2ou5fd9ZzfO3Het1ruoU5ZqkSriw4DVMyn0BWMVZKREMoNibrabFAKIw8DtU50xraUYJ2TJhn-1WVcGQX2DeS9nvQHT9bJo_tVN9DTFCRLvODl27l_G29sKY5YQkWXL_KPNLCyBak-Dysk1MzbHaYKgiPhdweQBgbxVASNKPnab_8gD9dYbLCjuW-mCEsnsLcTumbkCgnunZk9RV4FmYEtfyxdCnTnU932u9Q6xhoxocPBWwiaTbDpWP_XEwCAUBnt1wv7QzCTVVYN10mdqLTaq9MFNiskJd9YibVNGLWZKHFVtl4IJajnLs4wvOEUbeE_LGmgcGnIw_a9dtFp2QEiZOk0Xd0-7-7Rb8uWniF__33dqQ7mNSmQp3sOnKUri8Et1.bGPutDLMUsrk5xbJ2fd_gw", "source": "Lenses.io Ltd", "details": "Lenses", "clientId": "ddc9917c-7e17-11ed-8f1e-42010af01003"}

  # licenseUrl is a url pointing to the Lenses license
  licenseUrl:

  # Uncomment to inject custom env vars if needed
#  env:
#    CUSTOM_ENV_VAR: "foo"
  additionalEnv:
    env:
      PAUSE_EXEC: 1
  # extra configurations that will be append to the lenses.conf file mounted in /mnt/settings
  ## keys must be uppercase and underscores for separators suit for use as environment variables
  ## see https://docs.lenses.io/install_setup/configuration/lenses-config.html#option-reference
  configOverrides: {}
    #LENSES_PROPERTY : value

sidecarContainers:
  # - name: sidecar-example
  #   image: alpine
  #   command: ["sh", "-c", "watch datetime"]
